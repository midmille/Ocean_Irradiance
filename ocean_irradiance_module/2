                                # -*- coding: utf-8 -*-
"""
Created on Fri Jul 24 08:56:50 2020

@author: Miles Miller
"""

"""
Here I am making a function that  contains all phytoplankton absorbtion and 
scattering by wavelength
--> All values will be eyeballed form the 
--> going to create first dictionaries for each phy tht has each wavelength as key and 
each corresponding value of a tuple (a,b)
-->Then nest all those dictionaries into a big dictionary with the name of the 
plankton as the key, and its wavelength dictionary as the value. 
"""

"""

"""
## dictionaries for each plankton type 
## {wavelength:(a,b)}
## HLPro 

import numpy as np
from ocean_irradiance_module import PARAMS
import pandas

def absorbtion_scattering(wavelength, constituent, C2chla = 'default', dut_txt=True):
    """
    
    

    Parameters
    ----------
    wavelength : int
        --> Must be one of the following wavelengths:
            410,443,486,551,638,671
    constituent : string
        --> Must be one of the following words: 
            water, HLPro, Cocco, Diat, Generic, Syn 
    C2chla: Float or 'default'
        The carbon to chla value. 
    dut_txt: Boolean 
        The flag for using the Dutkiwiecz values sent via an email on April 8, 2022 from Stephanie. 

    Returns
    -------
    None.

    """
    
    if C2chla == 'default':
        ## [Import the Carbon to Chla from the PARAMS.py file.] 
        PI = PARAMS.Param_Init()
        ## [Large phytoplankton C2Chla ratio.] 
        LC2chla = PI.LC2chla
        ## [Small phytoplankton C2Chla ration.]
        SC2chla = PI.SC2chla
        ## [Medium phytoplankton C2Chla ration.]
        C2chla = PI.C2chla
    else: 
        LC2chla = C2chla
        SC2chla = C2chla


    if dut_txt == False: 
        ## [The start of the different coefficient dictionaries.]
        water = {}
    
        ## These values were edited on 1/28/2022 with Chris and Jonathan. 
        ## Absorption and Scattering values edited to be values taken from optical properties of water
        ## Light and Water Chapter 3: Optical Properties of Water Table 3.5 page 90. 
        ## http://misclab.umeoce.maine.edu/boss/classes/RT_Weizmann/Chapter3.pdf
        water[410] = np.array((0.0162,.007))  
        water[443] = np.array((0.0145,.0049))
        water[486] = np.array((.0196,.0031))
        water[551] = np.array((.0638,.0019))
        water[638] = np.array((.329,.0010))
        water[671] = np.array((.430,.0008))
     
     
        HLPro = {} 
     
        HLPro[410] = np.array((.03,.0038*C2chla))
        HLPro[443] = np.array((.05,.004*C2chla))
        HLPro[486] = np.array((.025,.004*C2chla))
        HLPro[551] = np.array((.003,.0032*C2chla))
        HLPro[638] = np.array((.005,.0017*C2chla))
        HLPro[671] = np.array((.02,.0014*C2chla))
     
        Cocco = {}
     
        Cocco[410] = np.array((.023,.007*C2chla))
        Cocco[443] = np.array((.028,.006*C2chla))
        Cocco[486] = np.array((.026,.0079*C2chla))
        Cocco[551] = np.array((.009,.009*C2chla))
        Cocco[638] = np.array((.005,.009*C2chla))
        Cocco[671] = np.array((.02,.008*C2chla))
     
        Diat = {}
     
        Diat[410] = np.array((.015,.0038*LC2chla))
        Diat[443] = np.array((.014,.0038*LC2chla))
        Diat[486] = np.array((.01,.0039*LC2chla))
        Diat[551] = np.array((.005,.004*LC2chla))
        Diat[638] = np.array((.005,.0039*LC2chla))
        Diat[671] = np.array((.012,.0038*LC2chla))
     
        Generic = {}
     
        Generic[410] = np.array((.03,.0062*C2chla))
        Generic[443] = np.array((.036,.006*C2chla))
        Generic[486] = np.array((.025,.006*C2chla))
        Generic[551] = np.array((.014,.0059*C2chla))
        Generic[638] = np.array((.008,.0046*C2chla))
        Generic[671] = np.array((.017,.004*C2chla))
     
        Syn = {}
     
        Syn[410] = np.array((.036,.0078*SC2chla))
        Syn[443] = np.array((.043,.007*SC2chla))
        Syn[486] = np.array((.031,.0065*SC2chla))
        Syn[551] = np.array((.031,.0051*SC2chla))
        Syn[638] = np.array((.008,.004*SC2chla))
        Syn[671] = np.array((.017,.0035*SC2chla))


        if constituent == 'water':
            return water[wavelength]
        if constituent == 'HLPro': 
            return HLPro[wavelength]
        if constituent == 'Cocco': 
            return Cocco[wavelength]
        if constituent == 'Diat':
            return Diat[wavelength]
        if constituent == 'Generic': 
            return Generic[wavelength]
        if constituent == 'Syn':
            return Syn[wavelength]
 
    ## [Use the Dutkiewicz text file coefficients.]
    if dut_txt == True: 

        ## [The water data frame.]
        ## [Water data fram column names.]
        wat_cols = ['wavelength', 'a', 'b']
        opt_wat = pandas.read_csv("optics_water.txt", header=None, sep=' ', skiprows=7, names=wat_cols)

        ## [The phytoplankton data frame.]
        ## [Phytoplankton column names.]
        phy_cols = phy_cols = ["species", 
                               "wavelength",
                               "a (m2 mgChl-1)",
                               "a_photosynthetic (m2 mgChl-1)",
                               "b_tot (m2 mgC-1)",
                               "non-spec bb coef (m2 mgC-1)",
                               "a (m2 mgC-1)" ]

        opt_phy = pandas.read_csv("optics_plankton.txt", 
                                   header=None, 
                                   sep=" ", 
                                   skiprows=8, 
                                   comment="*", 
                                   names=phy_cols)

        if constituent == 'water': 
            a = opt_wat[opt_wat["wavelength"] == wavelength].values[0,1]
            b = opt_wat[opt_wat["wavelength"] == wavelength].values[0,2]
            return a,b

        else: 
            ## [The if constituent == species_name syntax is used because we name some of 
            ##  the species differently then the text file does.]
            if constituent == 'Micromonas':
                spec_name = "Micromonas"
            if constituent == 'Syn':
                spec_name = "Syn"
            if constituent == 'HLPro':
                spec_name = "HLPro"
            if constituent == 'LLPro':
                spec_name = "LLPro"
            if constituent == 'Diat':
                spec_name = "Diatom"
            if constituent == 'Cocco':
                spec_name = "Syn"


            ## [Species specific portion of the data frame.]
            spec_df = opt_phy[opt_phy["species"] == spec_name]
            ## [Getting the wavelength specific values.]
            a = spec_df[spec_df["wavelength"] == wavelength].values[[

     
    
    if constituent == 'water':
        return water[wavelength]
    if constituent == 'HLPro': 
        return HLPro[wavelength]
    if constituent == 'Cocco': 
        return Cocco[wavelength]
    if constituent == 'Diat':
        return Diat[wavelength]
    if constituent == 'Generic': 
        return Generic[wavelength]
    if constituent == 'Syn':
        return Syn[wavelength]
    
def equivalent_spherical_diameter(species):
    """
    Retrieves the equivalent spherical diameter for each species of phytoplankton
    
    The ESD is returned in units of micro meters.

    See Notes for 12/7
    """ 

    if species == 'HLPro': 
        return 0.6 
    if species == 'Cocco': 
        return 4 
    if species == 'Diat':
        return 17
    if species == 'Generic': 
        return 10 
    if species == 'Syn':
        return .98 
    







